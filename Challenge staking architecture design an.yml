Challenge staking architecture design and implementation

Stage 1 - Start Game Flow
Stage 1.1
 - User requests to be matched with someone to play a game
    - Client sends a request to the server
    - Client shows a matching screen
    - Server looks for someone else requesting a match at that moment for the same amount and category
        1)  - server deducts money
            - Server creates a document in firestore with the requests data (documentId, username, )
            - Server returns the documentId to the client
            - Client subscribes to the documentId on firebase for realtime updates

            Endpoint 
            - deduct money
            - updates real time challenge requests table
            - create firestore document
            - return the documentId

        2)  - Server finds matching request in the same category and amount in the background
            - If found, server updates the both  documentId in firebase with the new data (questions and opponent info, start command)
            - Server updates challenge information table with details and clears realtime challenge requests
              - server sends a message to both clients to start the game
            
            Endpoint
            - searches and finds a match (How do we ensure the other opponent recieves the same match)
            - updates firestore document
            - updates backend challenge table
            - sends message to start game
    
    - If not found, server sends a message to the user to start game with a bot

Backend table structure
- realtime challenge requests
  id
  documentId (autogenerated)
  userId
  # userName
  amount
  category

- challenge information
  id
  first_user_id
  second_user_id
  first_user_documentId
  second_user_documentId
  amount
  category
  status
  startTime
  endTime

- challenge_session_questions
  id
  challenge_id
  question_id
  status (correct, incorrect)
